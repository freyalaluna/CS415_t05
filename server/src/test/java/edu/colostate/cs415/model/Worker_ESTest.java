/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 27 20:04:18 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.WorkerDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Worker_ESTest extends Worker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      worker0.setSalary(0.0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu:0:2:1", linkedHashSet0, 0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0, workerDTO0.getWorkload());
      assertEquals(0.0, workerDTO0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu:0:2:1", linkedHashSet0, 0);
      double double0 = worker0.getSalary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      int int0 = worker0.getWorkload();
      assertEquals(1.0, worker0.getSalary(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      worker0.getName();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      worker0.hashCode();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("gVh8OtmhZuo}RKY@J-");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0, workerDTO0.getWorkload());
      assertEquals(1.0, workerDTO0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      // Undeclared exception!
      try { 
        worker0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      boolean boolean0 = worker0.willOverload((Project) null);
      assertFalse(boolean0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      boolean boolean0 = worker0.isAvailable();
      assertTrue(boolean0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      // Undeclared exception!
      try { 
        worker0.removeProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      // Undeclared exception!
      try { 
        worker0.addProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("%8{?eu:gi:1:1");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("%8{?eu:gi:1:1", linkedHashSet0, 528.7256662);
      // Undeclared exception!
      try { 
        worker0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Qualification qualification0 = new Qualification("gVn8O2mh=uotRKY@J-");
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      worker0.addQualification(qualification0);
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 0.7893038152067056);
      // Undeclared exception!
      try { 
        worker0.setSalary((-2669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("%8{?eu:gi:1:1");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("%8{?eu:gi:1:1", linkedHashSet0, 528.7256662);
      worker0.setSalary(528.7256662);
      assertEquals(528.7256662, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("`");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("`", linkedHashSet0, 7.725330696185081);
      boolean boolean0 = worker0.equals("`");
      assertFalse(boolean0);
      assertEquals(7.725330696185081, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      boolean boolean0 = worker0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("}");
      linkedHashSet0.add(qualification0);
      Worker worker0 = null;
      try {
        worker0 = new Worker("'", linkedHashSet0, (-718.1643261872));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("A&NTN.", linkedHashSet0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker("uI", (Set<Qualification>) null, (-1781.8326222337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("", linkedHashSet0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker((String) null, linkedHashSet0, (-849.1993835205318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      worker0.getProjects();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      boolean boolean0 = worker0.equals(worker0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("*%8{?eu", linkedHashSet0, 1.0);
      String string0 = worker0.toString();
      assertEquals("*%8{?eu:0:1:1", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("*%8{?eu:0:1:l1");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("*%8{?eu:0:1:l1", linkedHashSet0, 507.703211648451);
      worker0.getQualifications();
      assertEquals(507.703211648451, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("`");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("`", linkedHashSet0, 7.725330696185081);
      double double0 = worker0.getSalary();
      assertEquals(7.725330696185081, double0, 0.01);
  }
}
