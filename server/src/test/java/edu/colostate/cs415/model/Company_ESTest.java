/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 27 22:24:06 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.model.Company;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Company_ESTest extends Company_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Company company0 = new Company("&_b");
      Set<Worker> set0 = company0.getUnassignedWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Company company0 = new Company(":");
      company0.createQualification(":");
      Set<Qualification> set0 = company0.getQualifications();
      company0.createWorker(":", set0, 0.0);
      Set<Worker> set1 = company0.getEmployedWorkers();
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Company company0 = new Company(":");
      company0.createQualification(":");
      Set<Qualification> set0 = company0.getQualifications();
      company0.createWorker(":", set0, 0.0);
      Set<Worker> set1 = company0.getAvailableWorkers();
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      String string0 = company0.getName();
      assertEquals("edu.colostate.cs415.dto.ProjectDTO", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Company company0 = new Company(":");
      company0.createQualification(":");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(":", set0, 0.0);
      Company company1 = new Company(":");
      // Undeclared exception!
      try { 
        company1.unassignAll(worker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      company0.createQualification("edu.colostate.cs415.dto.ProjectDTO");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("edu.colostate.cs415.dto.ProjectDTO", set0, 2.9315827688319174);
      company0.unassignAll(worker0);
      assertEquals("edu.colostate.cs415.dto.ProjectDTO", company0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Company company0 = new Company("h$$/gSwp");
      // Undeclared exception!
      try { 
        company0.unassignAll((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      company0.createQualification("edu.colostate.cs415.dto.ProjectDTO");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("edu.colostate.cs415.dto.ProjectDTO", set0, 2.9315827688319174);
      // Undeclared exception!
      try { 
        company0.unassign(worker0, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Company company0 = new Company("SyQ^,");
      // Undeclared exception!
      try { 
        company0.unassign((Worker) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      company0.createQualification("edu.colostate.cs415.dto.ProjectDTO");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("edu.colostate.cs415.dto.ProjectDTO", set0, 1.0);
      // Undeclared exception!
      try { 
        company0.assign(worker0, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      // Undeclared exception!
      try { 
        company0.assign((Worker) null, (Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Company company0 = new Company("`.n/*}DpVq");
      // Undeclared exception!
      try { 
        company0.finish((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Company company0 = new Company(",u1lG2w!+Pm].*");
      // Undeclared exception!
      try { 
        company0.start((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Company company0 = new Company("?33R,:tB`7XNN{g[");
      Set<Qualification> set0 = company0.getQualifications();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = company0.createProject("", set0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Company company0 = new Company("SEQ8^,");
      Set<Qualification> set0 = company0.getQualifications();
      Project project0 = company0.createProject("edu.colostate.cs415.model.Company", set0, (ProjectSize) null);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Company company0 = new Company(",u1lG2w!+Pm].*");
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = company0.createProject("SMALL", (Set<Qualification>) null, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Company company0 = new Company("BSFm[");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      // Undeclared exception!
      try { 
        company0.createProject("6m|'^uw", linkedHashSet0, projectSize0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // spark/utils/StringUtils
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = company0.createProject((String) null, linkedHashSet0, projectSize0);
      assertNull(project0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Company company0 = new Company(":");
      company0.createQualification(":");
      Qualification qualification0 = company0.createQualification(":");
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Company company0 = new Company(":");
      Qualification qualification0 = company0.createQualification("");
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      Qualification qualification0 = company0.createQualification((String) null);
      assertNull(qualification0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = company0.createWorker("edu.colostate.cs415.dto.ProjectDTO", linkedHashSet0, 12);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Company company0 = new Company("SEQ8^,");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("', projects='", set0, 1.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Company company0 = new Company("h$$/gSwp");
      Worker worker0 = company0.createWorker("h$$/gSwp", (Set<Qualification>) null, 0.0);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Company company0 = new Company("SyQ^,");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("SyQ^,", set0, (-1.0));
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Company company0 = new Company("BNi-e.LH@");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker("", set0, 2079.2554);
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Company company0 = new Company("SEQ8^,");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker((String) null, set0, (-339.75214137));
      assertNull(worker0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Company company0 = new Company(":");
      company0.createQualification(":");
      Set<Qualification> set0 = company0.getQualifications();
      Worker worker0 = company0.createWorker(":", set0, 0.0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
      
      Set<Worker> set1 = company0.getUnassignedWorkers();
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Company company0 = new Company(":");
      boolean boolean0 = company0.equals(":");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Company company0 = new Company("&_b");
      boolean boolean0 = company0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Company company0 = null;
      try {
        company0 = new Company((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Company", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Company company0 = new Company(":");
      Set<Worker> set0 = company0.getAvailableWorkers();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Company company0 = new Company(":");
      Set<Worker> set0 = company0.getUnavailableWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      Set<Project> set0 = company0.getProjects();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Company company0 = new Company("edu.colostate.cs415.dto.ProjectDTO");
      Set<Worker> set0 = company0.getAssignedWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Company company0 = new Company("', missingQualifications='");
      company0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Company company0 = new Company(":");
      String string0 = company0.toString();
      assertEquals("::0:0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Company company0 = new Company(":");
      Set<Worker> set0 = company0.getEmployedWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Company company0 = new Company("`.n/*}DpVq");
      boolean boolean0 = company0.equals(company0);
      assertTrue(boolean0);
  }
}
